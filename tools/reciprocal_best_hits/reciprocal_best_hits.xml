<tool id="reciprocal_best_hits" name="BLAST Reciprocal Best Hits (RBH)" version="0.0.6">
    <description>from BLAST output or similar data</description>
    <version_command interpreter="python">
reciprocal_best_hits.py --version
    </version_command>
    <command interpreter="python">
reciprocal_best_hits.py "$a_vs_b" "$b_vs_a" $id1 $id2 $score $order "$output"
    </command>
    <stdio>
        <!-- Anything other than zero is an error -->
        <exit_code range="1:" />
        <exit_code range=":-1" />
    </stdio>
    <inputs>
        <param name="a_vs_b" type="data" format="tabular" label="Hits from querying A against B" description="Tabular file, e.g. BLAST output" /> 
        <param name="b_vs_a" type="data" format="tabular" label="Hits from querying B against A" description="Tabular file, e.g. BLAST output" /> 
	<!-- Rather than the typical use of "value" for the default,
             the data_column (currently) uses "default_value" instead.
             And the default must be given as a number "2" not "c2". -->
        <param name="id1" type="data_column" data_ref="a_vs_b" multiple="False" numerical="False" default_value="1" value="1" label="Column containing query ID" help="This is column 1 in standard BLAST tabular output" />
        <param name="id2" type="data_column" data_ref="a_vs_b" multiple="False" numerical="False" default_value="2" value="2" label="Column containing match ID" help="This is column 2 in standard BLAST tabular output"/>
        <param name="score" type="data_column" data_ref="a_vs_b" multiple="False" numerical="False" default_value="12" value="12" label="Column containing containing score to rank on" help="The bit score is column 12 in standard BLAST tabular output (highest is best), while e-value is column 11 (lowest is best)"/>
        <param name="order" type="select" label="Highest or lowest score is best?">
            <option value="high">Highest is best (e.g. BLAST bitscore)</option>
            <option value="low">Lowest is best (e.g. BLAST e-value)</option>
        </param>
    </inputs>
    <outputs>
        <data name="output" format="tabular" label="RBH results" />
    </outputs>
    <requirements>
    </requirements>
    <tests>
    </tests>
    <help>
**What it does**

Takes two tabular search results files (A against B, and B against A) and
compiles a list of the reciprocal best hits (RBH).

NCBI BLAST+ (and the older NCBI 'legacy' BLAST) and other related search
tools like Bill Pearson's FASTA suite can can output matches (hits) in a
tabular form suitable for use with this tool.

The output from this tool is a tabular file containing four columns, with
the order taken from input file A:

====== =================
Column Description
------ -----------------
     1 ID from file A
     2 ID from file B
     3 Score from A vs B
     4 Score from B vs A
====== =================


.. class:: warningmark

**Note**

This tool does not do any filtering of the data. If you are trying to use
BLAST RBH matches to identify candidate orthologues or transfer annotation,
you *must* use a percentage identity and minimum coverage threshold or
similiar. See *Suggested Filters* below for examples of how to do this in
Galaxy. See also:

Punta and Ofran (2008) The Rough Guide to In Silico Function Prediction,
or How To Use Sequence and Structure Information To Predict Protein
Function. PLoS Comput Biol 4(10): e1000160.
http://dx.doi.org/10.1371/journal.pcbi.1000160


**Suggested settings**

The suggested settings of query ID in column 1, match/subject ID in column
2 and the score in column 12 (where highest is best) assume you have the
standard 12 column BLAST tabular output (or the extended tabular output
with additional extra columns) and want to rank on the bit score.

If you wanted to rank on the e-value, use column 11 and select lowest score
is best. However, e-values are dependent on the dataset size.

Note the tool assumes that the same column numbers apply to both the input
files.

The standard 12 column output from BLAST+ is as follows:

====== ========= ============================================
Column NCBI name Description
------ --------- --------------------------------------------
     1 qseqid    Query Seq-id (ID of your sequence)
     2 sseqid    Subject Seq-id (ID of the database hit)
     3 pident    Percentage of identical matches (between 0 and 100)
     4 length    Alignment length
     5 mismatch  Number of mismatches
     6 gapopen   Number of gap openings
     7 qstart    Start of alignment in query
     8 qend      End of alignment in query
     9 sstart    Start of alignment in subject (database hit)
    10 send      End of alignment in subject (database hit)
    11 evalue    Expectation value (E-value)
    12 bitscore  Bit score
====== ========= ============================================


**Suggested filters**

To require 70% sequence identity over the aligned region, use **c3 >= 70**
in Galaxy's tool for filtering tabular data.

To require the alignment to cover a minimum percentage of the query
sequence, you will need the extended BLAST tabular output (with additional
extra columns). To require at least 50%, use **c8-c7+1 >= 0.5*c23** where
**c23** is the query length, and **c8-c7+1** gives the length of the aligned
part of the query from its start and end coordinates. If you used **c4**
instead which is the alignment length, it could include gap characters.

Similarly, to require the alignment covers at least 50% of the subject
sequence, use **c10-c9+1 >= 0.5*c24** as the filter expression.

Note for BLASTX or TBLASTN, those expressions may need adjustment for
converting from nucleotide coordinates to amino acids (factor of 3).

    </help>
    <citations>
        <!-- TODO -->
    </citations>
</tool>
